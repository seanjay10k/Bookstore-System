<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		 http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
		 		  	http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Transaction manager : This acts as an advice for transaction aspect -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Data Sources for connection pool using dbcp.BasicDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:file:database.dat;shutdown=true" />
		<property name="username" value="sa" />
		<property name="password" value="" />

	</bean>
	<!-- Templates -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- Dao Beans -->



	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.sp.avalon.domain</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_key">true</prop>
				<prop key="hibernate.hbm2ddl">update</prop>
			</props>
		</property>
	</bean>

	<bean id="bookDao" class="com.sp.avalon.data.BookDaoCleanerJdbcImpl"
		init-method="createTable">
		<constructor-arg ref="jdbcTemplate" />
	</bean>

	<!-- Service Beans -->
	<bean id="bookService" class="com.sp.avalon.services.BookServiceProductionImpl">
		<constructor-arg ref="bookDao" />
	</bean>

	<bean id="accountsService" class="com.sp.avalon.services.AccountsServiceMockImpl" />

	<bean id="purchasingService" class="com.sp.avalon.services.PurchasingServiceImpl">
		<property name="accountsService" ref="accountsService" />
		<property name="bookService" ref="bookService" />
	</bean>

	<!-- Production level Advice -->
	<bean id="performanceTimingAdvice" class="com.sp.avalon.advice.PerformanceTimingAdviceProduction" />



	<!-- Proxies: Weaving the advice with the classes defined by pointcut -->
	<aop:config>
		<aop:aspect ref="performanceTimingAdvice">
			<aop:around method="performTimingMeasurement"
				pointcut="execution(java.util.List com.sp.avalon.services.*.*(..) )" />
			<aop:before method="beforeAdviceTesting"
				pointcut="execution(java.util.List com.sp.avalon.services.*.get*(..))" />
		</aop:aspect>
	</aop:config>


	<!-- Transaction Configuration <tx:annotation-driven transaction-manager="transactionManager"/> -->

	<!-- Transaction Manager -->
	<tx:advice id="allMethodsToBeTransactional">
		<tx:attributes>
			<tx:method name="buyBook" rollback-for="CustomerCreditExceededException" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor advice-ref="allMethodsToBeTransactional"
			pointcut="execution(* com.sp.avalon.services..*.*(..))" />
	</aop:config>




</beans>





	
<?ignore  ********************************************************************************************************* -->
	<!-- for pointcut syntax: "execution(returnTypeOfMethod packages.class.method(Parameters))" ..=don't care, *=must have at least 1 parameter -->
	
	
	<!-- Spring will search for annotated aop, use this with PerformanceTimingAdviceAnnotated
	<aop:aspectj-autoproxy/>
	-->


	<!-- ONE WAY OF DOING PROXIES -->
	<!-- Given a Advice, Proxies Auto-Generated By Spring using Spring aop ProxyFactoryBean 
		<bean id ="performanceTimingAdvice" class="com.sp.avalon.advice.PerformanceTimingAdvice"/> 
		
		<bean id="bookService" class="org.springframework.aop.framework.ProxyFactoryBean"> 
			<property name="proxyInterfaces" value="com.sp.avalon.services.BookService"/> 
			<property name="interceptorNames"> <list> <value>performanceTimingAdvice</value> 
												</list> </property>
			<property name="target" ref="bookServiceTarget"/> </bean> -->


	<!-- ANOTHER WAY OF DOING PROXIES -->
	<!-- Proxy Timing Bean Self Made........ 
		<bean id="bookService" class="com.sp.avalon.services.BookServiceTimingProxy"> 
		<property name="originalBookService" ref="bookServiceTarget" /> </bean> -->



<!-- property name="abcXyz" matches a setter getAbcXyz(..) -->

<!-- lazy-init= "true" add as attribute to bean tag if you need lazy initialization. 
	ie, dont create an object/bean of this class until i am using it. eg not 
	when application.xml line is executed(which is default) -->


<!-- scope="prototype" add as attribute to bean tag Spring creates only one 
	object each of the beans listed above by default. ie, SINGLETON BEAN To create 
	a STATEFUL BEAN ie for shopping cart application, you will need a stateful 
	spring bean, then this is how you tell your xml config file to create unique 
	bean for each client. -->

<!-- <constructor-arg index="0" ref="accountsService" /> <constructor-arg 
	index="1" ref="bookService" /> Note: must have a contructor that matches 
	these args in the class/bean instead of using setters like we have in this 
	xml, ie properties, we can use constructors. ..using properties injection 
	or constructors injection to a class is called Dependency Injection, done 
	thru xml -->
	
	
	<!-- Spring SpEL Language Test bean -->
	<bean id="simpleBeanA" class="SpELTest.SpringBeanA">
		<property name="firstValue" value="This is some important Business Value"/>
	</bean>

	<bean id="simpleBeanB" class="SpELTest.SpringBeanB"> 
		<property name="secondValue" value=" #{simpleBeanA.getFirstValue()}" />
		<property name="randomValue" value="#{ (T(java.lang.Math).random()*10)+1}"/>
		<!-- When you call a static method using SpEL, should have that T in there surrounding the class 
		Also, #{simpleBeanA.getFirstValue()} can be written as #{simpleBeanA.firstValue}  .
		-->
	</bean>

<!-- To make Autowire via Annotation work. If this tag is removed, annotations are ignored. -->
	<context:component-scan base-package="SpELTest"/>
	
?>